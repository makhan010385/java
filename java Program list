Q.1 WAP to print HEllo world?

class HelloWorld
{
   public static void main(String args[])
   {
      System.out.println("Hello World");
   }
}

--------------------------------------------------------------------
Q.2 WAP to Calculate Area Of Circle?

public class AreaOfCircle{
   public static void main(String args[]){
      double area, radius;
      radius= 5;
      System.out.printf("The radius of the circle is %.8f ", radius);
      area=(22*radius*radius)/7 ;
      System.out.println("The Area of Circle is: " + area);
   }
}

--------------------------------------------------------------------------------
Q.3 WAP to calculate Area Of Triangle?

public class AreaOfTriangle{
   public static void main(String args[]){
      double b, h;
     
       
      area=(b*h)/2 ;
      System.out.println("The Area of Triangle is: " + area);
   }
}




-------------------------------------------------------------------------------------------
Q.4    WAP to calculate Area Of Rectangle?


public class AreaOfRectangle{
   public static void main(String args[]){
     double l=1000,b=15000;
       double area=(b*h)/2;
      System.out.println("Area of fRectangle is: " + area); 
     
   }
}
---------------------------------------------------------------------------------------------
Q.5 WAP to calculate Sum of two numbers


public class sum {
  public static void main(String[] args) {
     int num1 = 5, num2 = 15,sum;
      sum = num1+num2;
  
    System.out.println("Sum of "+num1+" and "+num2+" is: "+sum);
  }
}

---------------------------------------------------------------------------------------------
Q.6 How to take input from user 



import java.util.Scanner; // import the Scanner class 

class Input 

{
  public static void main(String[] args) {
    Scanner myObj = new Scanner(System.in);
    String userName;
    
    // Enter username and press Enter
    System.out.println("Enter username"); 
    userName = myObj.nextLine();   
       
    System.out.println("Username is: " + userName);        
  }
}

------------------------------------------------------------------------------------------


java Input Methods 

Input Types
In the example above, we used the nextLine() method, which is used to read Strings. To read other types, look at the table below:

Method	Description
nextBoolean()	Reads a boolean value from the user
nextByte()	Reads a byte value from the user
nextDouble()	Reads a double value from the user
nextFloat()	Reads a float value from the user
nextInt()	Reads a int value from the user
nextLine()	Reads a String value from the user
nextLong()	Reads a long value from the user
nextShort()	Reads a short value from the user

-----------------------------------------------------------------------------------------------


Q.7   WAP program perform addition of two number using SCanner classs


import java.util.Scanner;
public class Inputfunctions {
  public static void main(String[] args) {
   Scanner readme = new Scanner(System.in);
   System.out.println("Enter Two Numbers (Press Enter after each):");
   //two variables to hold numbers
   double n1, n2, n3;
   n1 = readme.nextDouble();
   n2 = readme.nextDouble();
   n3 = n1 + n2;
   System.out.println("Total = " + n3);
  }
}
-------------------------------------------------------------------------------------------------------------------------------------------
Explain the Java Type Casting

Type casting is when you assign a value of one primitive data type to another type.
In Java, there are two types of casting:
Widening Casting (automatically) - converting a smaller type to a larger type size
byte -> short -> char -> int -> long -> float -> double
Narrowing Casting (manually) - converting a larger type to a smaller size type
double -> float -> long -> int -> char -> short -> byte

Widening Casting
Widening casting is done automatically when passing a smaller size type to a larger size type:


Example:----------------------
public class Type_Casting {
  public static void main(String[] args) {
    int myInt = 9;
    double myDouble = myInt; // Automatic casting: int to double

    System.out.println(myInt);      // Outputs 9
    System.out.println(myDouble);   // Outputs 9.0
  }
}
--------------------------------------------------------------------------------------------------------------------------------------------

Java Operators

Java divides the operators into the following groups:

1. Arithmetic operators:

+	Addition	Adds together two values	x + y	
-	Subtraction	Subtracts one value from another	x - y	
*	Multiplication	Multiplies two values	x * y	
/	Division	Divides one value by another	x / y	
%	Modulus	Returns the division remainder	x % y	
++	Increment	Increases the value of a variable by 1	++x	
--
2. 


2. Assignment operators

Java Assignment Operators
Assignment operators are used to assign values to variables.

In the example below, we use the assignment operator (=) to assign the value 10 to a variable called x:

Example

Operator Example     Same As	 
=	      x = 5  	     x = 5	
+=	      x += 3	   x = x + 3	
-=	      x -= 3	   x = x - 3	
*=	     x *= 3    	x = x * 3	
/=      	x /= 3	  x = x / 3	
%=    	x %= 3	   x = x % 3	
&=     	x &= 3	  x = x & 3	
|=	      x |= 3	  x = x | 3	
^=     	x ^= 3	  x = x ^ 3	
>>=	   x >>= 3	  x = x >> 3	
<<=	   x <<= 3	  x = x << 3

Example of Some Difficult operator

public class Main {
  public static void main(String[] args) {
    int x = 5;
    x %= 3;
    System.out.println(x);
  }
}


3.  Java Comparison Operators
Comparison operators are used to compare two values. This is important in programming,
because it helps us to find answers and make decisions.

The return value of a comparison is either true or false. These values are known as Boolean values,
and you will learn more about them in the Booleans and If..Else chapter.


Operator   Name	        Example	 
==	       Equal to    	x == y	
!=  	   Not equal	    x != y	
>	     Greater than	 x > y	
<	     Less than	      x < y	
>=	     Greater than or equal to	x >= y	
<=  	 Less than or equal to	      x <= y


Example  1:

public class Main {
  public static void main(String[] args) {
    int x = 5;
    int y = 3;
    System.out.println(x != y); // returns true because 5 is not equal to 3
  }
}



Example  2:
public class Main 
{
  public static void main(String[] args) {
    int x = 5;
    int y = 3;
    System.out.println(x == y); // returns false because 5 is not equal to 3
  }
}


Example 3: 

public class Main {
  public static void main(String[] args) {
    int x = 5;
    int y = 3;
    System.out.println(x >= y); // returns true because 5 is greater, or equal, to 3
  }
  }
----------------------------------------------------------------------------------------------------------  
Example 4:Java Logical Operators

We can also test for true or false values with logical operators.

Logical operators are used to determine the logic between variables or values:

Operator	Name	Description	Example	Try it
&& 	Logical and	Returns true if both statements are true      	      x < 5 &&  x < 10	
|| 	Logical or	Returns true if one of the statements is true	      x < 5 || x < 4	
!	Logical not	Reverse the result, returns false if the result is true 	!(x < 5 && x < 10) 
  
Example 1:

public class Main

{
  public static void main(String[] args) {
    int x = 5;
    System.out.println(x > 3 && x < 10); // returns true because 5 is greater than 3 AND 5 is less than 10
  }
  
  Example 2:  
  
  public class Main {
  public static void main(String[] args) {
    int x = 5;
    System.out.println(x > 3 || x < 4); // returns true because one of the conditions are true (5 is greater than 3, but 5 is not less than 4)
  }
}

Example 3:
public class Main 
{
  public static void main(String[] args) {
    int x = 5;
    System.out.println(!(x > 3 && x < 10)); // returns false because ! (not) is used to reverse the result
  }
}

}









In the following example, we use the greater than operator (>) to find out if 5 is greater than 3:





Comparison operators
Logical operators
Bitwise operators








Q.8                  
Q.6 WAP to calculate Simple interset?      for Srtudents.
Q.7 WAP to  calculate square of a given number. (static number )  for Srtudents.
Q.8 




 
